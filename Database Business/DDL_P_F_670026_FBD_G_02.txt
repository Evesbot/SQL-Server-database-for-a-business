

CREATE DATABASE BD_UNAT

USE BD_UNAT

--- CREACION SCHEMAS----

USE BD_UNAT

GO	
CREATE SCHEMA SCH_FUNCIONARIOS
GO
CREATE SCHEMA SCH_PROCESOS
GO
CREATE SCHEMA SCH_OFICINA


IF OBJECT_ID('SCH_FUNCIONARIOS.PROVINCIA') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.PROVINCIA
GO
CREATE TABLE SCH_FUNCIONARIOS.PROVINCIA(
ID_PROVINCIA_PK INT PRIMARY KEY,
NOMBRE_PROVINCIA VARCHAR(180),
)

IF OBJECT_ID('SCH_FUNCIONARIOS.CANTON') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.CANTON
GO
CREATE TABLE SCH_FUNCIONARIOS.CANTON(
ID_CANTON_PK INT PRIMARY KEY,
NOMBRE_CANTON VARCHAR(180),
FK_ID_PROVINCIA_FK INT,
constraint FK_ID_PROVINCIA_FK
foreign key (FK_ID_PROVINCIA_FK)
references PROVINCIA(ID_PROVINCIA_PK)
)

IF OBJECT_ID('SCH_FUNCIONARIOS.DISTRITO') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.DISTRITO
GO
CREATE TABLE SCH_FUNCIONARIOS.DISTRITO(
ID_DISTRITO_PK INT PRIMARY KEY,
NOMBRE_DISTRITO VARCHAR(180),
FK_ID_CANTON_FK INT,
constraint FK_ID_CANTON_FK
foreign key (FK_ID_CANTON_FK)
references CANTON(ID_CANTON_PK),
)

IF OBJECT_ID('SCH_FUNCIONARIOS.DIRECCION') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.DIRECCION
GO
CREATE TABLE SCH_FUNCIONARIOS.DIRECCION(
ID_DIRECCION_PK INT PRIMARY KEY NOT NULL,
CALLE VARCHAR(180),
AVENIDA VARCHAR(180),
OTRAS_SEÑAS VARCHAR(180),
FK_ID_CANTON_FK INT,
FK_ID_PROVINCIA__FK INT,
FK_ID_FUNCIONARIO_FK
constraint FK_ID_CANTON_FK
foreign key (FK_ID_CANTON_FK)
references CANTON(ID_CANTON_PK),
constraint FK_ID_PROVINCIA__FK
foreign key (FK_ID_PROVINCIA__FK)
references PROVINCIA(ID_PROVINCIA_PK)
constraint FK_ID_FUNCIONARIO_FK
foreign key (FK_ID_FUNCIONARIO_FK
references FUNCIONARIOS(ID_FUNCIONARIO_PK)
)

IF OBJECT_ID('SCH_FUNCIONARIOS.DISCIPLINA') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.DISCIPLINA
GO
CREATE TABLE SCH_FUNCIONARIOS.DISCIPLINA(
ID_DISCIPLINA_PK INT PRIMARY KEY,
NOMBRE_DISCIPLINA VARCHAR(180),
FK_ID_MACROPROCESO_FK INT, 
FK_ID_FUNCIONARIO_FK INT
constraint FK_ID_MACROPROCESO_FK
foreign key (FK_ID_MACROPROCESO_FK)
references MACROPROCESO(ID_MACROPROCESO_PK)
constraint FK_ID_FUNCIONARIO_FK
foreign key (FK_ID_FUNCIONARIO_FK
references FUNCIONARIOS(ID_FUNCIONARIO_PK)
)

IF OBJECT_ID('SCH_FUNCIONARIOS.CONTACTO') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.CONTACTO
GO
CREATE TABLE SCH_FUNCIONARIOS.CONTACTO(
ID_CONTACTO_PK INT PRIMARY KEY,
TIPO VARCHAR(180),
CONTACTO VARCHAR(180),
)

IF OBJECT_ID('SCH_FUNCIONARIOS.FUNCIONARIOS') IS NOT NULL
	DROP TABLE SCH_FUNCIONARIOS.FUNCIONARIOS
GO
CREATE TABLE SCH_FUNCIONARIOS.FUNCIONARIOS(
ID_FUNCIONARIO_PK INT PRIMARY KEY,
NOMBRE_FUNCIONARIO VARCHAR(180),
APELLIDO_FUNCIONARIO VARCHAR(180),
ID_CONTACTO_FK INT,
ID_DISCIPLINA_FK INT,
ID_DIRECCION_FK INT,
constraint ID_CONTACTO_FK 
foreign key (ID_CONTACTO_FK )
references CONTACTO(ID_CONTACTO_PK),
constraint ID_DISCIPLINA_FK
foreign key (ID_DISCIPLINA_FK)
references DISCIPLINA(ID_DISCIPLINA_PK),
constraint ID_DIRECCION_FK
foreign key (ID_DIRECCION_FK)
references DIRECCION(ID_DIRECCION_PK)
)

ALTER TABLE SCH_FUNCIONARIOS.FUNCIONARIOS
ADD ANOS_SERVICIO varchar(255);-- Crear la columna ANOS_SERVICIO/ Uso de ALTER

SELECT * FROM SCH_FUNCIONARIOS.FUNCIONARIOS -- Verificar la creación de la columna ANOS_SERVICIO

ALTER TABLE SCH_PROCESOS.PROCESO
DROP COLUMN ANOS_SERVICIO; -- Eliminar la columna ANOS_SERVICIO/ Uso de DROP

SELECT * FROM SCH_FUNCIONARIOS.FUNCIONARIOS -- Verificar la eliminación de la columna ANOS_SERVICIO


IF OBJECT_ID('SCH_PROCESOS.PROCESO') IS NOT NULL
	DROP TABLE SCH_PROCESOS.PROCESO
GO
CREATE TABLE SCH_PROCESOS.PROCESO(
ID_PROCESO_PK INT PRIMARY KEY,
NOMBRE_PROCESO VARCHAR(180),
DESCRIPCION VARCHAR(180),
FK_ID_NORMA INT,
constraint FK_ID_NORMA
foreign key (FK_ID_NORMA)
references NORMAS(ID_NORMA_PK)
)

ALTER TABLE SCH_PROCESOS.PROCESO
ADD VINCULACION_INFORME varchar(255);-- Crear la columna VINCULACION_INFORME/ Uso de ALTER

SELECT * FROM SCH_PROCESOS.PROCESO -- Verificar la creación de la columna VINCULACION_INFORME

ALTER TABLE SCH_PROCESOS.PROCESO
DROP COLUMN VINCULACION_INFORME; -- Eliminar la columna VINCULACION_INFORME/ Uso de DROP

SELECT * FROM SCH_PROCESOS.PROCESO -- Verificar la eliminación de la columna VINCULACION_INFORME


IF OBJECT_ID('SCH_PROCESOS.MACROPROCESO') IS NOT NULL
	DROP TABLE SCH_PROCESOS.MACROPROCESO
GO
CREATE TABLE SCH_PROCESOS.MACROPROCESO(
ID_MACROPROCESO_PK INT PRIMARY KEY,
NOMBRE_MACROPROCESO VARCHAR(180),
FK_ID_PROCESO INT,
constraint FK_ID_PROCESO
foreign key (FK_ID_PROCESO)
references PROCESO(ID_PROCESO_PK)
)

IF OBJECT_ID('SCH_PROCESOS.NORMAS') IS NOT NULL
	DROP TABLE SCH_PROCESOS.NORMAS
GO
CREATE TABLE SCH_PROCESOS.NORMAS(
ID_NORMA_PK VARCHAR PRIMARY KEY,
NOMBRE_NORMA VARCHAR(180),
CODIGO_NORMA VARCHAR(180),
FK_ID_MODALIDAD_ATENCION INT,
constraint FK_ID_MODALIDAD_ATENCION
foreign key (FK_ID_MODALIDAD_ATENCION)
references MODALIDAD_ATENCION(ID_MODALIDAD_ATENCION_PK)
)

IF OBJECT_ID('SCH_PROCESOS.PROCEDIMIENTOS') IS NOT NULL
	DROP TABLE SCH_PROCESOS.PROCEDIMIENTOS
GO
CREATE TABLE SCH_PROCESOS.PROCEDIMIENTOS(
CODIGO_PROCEDIMIENTO_PK INT PRIMARY KEY,
NOMBRE_PROCEDIMIENTOS VARCHAR(250),
FK_ID_NORMAS INT,
constraint FK_ID_NORMAS
foreign key (FK_ID_NORMAS)
references NORMAS(ID_NORMA_PK)
)

IF OBJECT_ID('SCH_PROCESOS.MANUAL_OPERATIVO') IS NOT NULL
	DROP TABLE SCH_PROCESOS.MANUAL_OPERATIVO
GO
CREATE TABLE SCH_PROCESOS.MANUAL_OPERATIVO(
ID_MANUAL_PK INT PRIMARY KEY,
NOMBRE_MANUAL_OPERATIVO VARCHAR(180),
CODIGO INT,
FK_CODIGO_PROCEDIMIENTO INT,
constraint FK_CODIGO_PROCEDIMIENTO
foreign key (FK_CODIGO_PROCEDIMIENTO)
references PROCEDIMIENTOS(CODIGO_PROCEDIMIENTO_PK)
)

IF OBJECT_ID('SCH_PROCESOS.MODALIDAD_ATENCION') IS NOT NULL
	DROP TABLE SCH_PROCESOS.MODALIDAD_ATENCION
GO
CREATE TABLE SCH_PROCESOS.MODALIDAD_ATENCION(
ID_MODALIDAD_ATENCION_PK INT PRIMARY KEY,
NOMBRE_MODALIDAD_ATENCION VARCHAR(180),
FK_CODIGO_NORMA INT,
FK_CODIGO_PROCEDIMIENTO INT,
constraint FK_CODIGO_NORMA
foreign key (FK_CODIGO_NORMA)
references NORMA(ID_NORMA_PK)
constraint FK_CODIGO_PROCEDIMIENTO
foreign key (FK_CODIGO_PROCEDIMIENTO)
references PROCEDIMIENTOS(CODIGO_PROCEDIMIENTO_PK)
)

IF OBJECT_ID('SCH_OFICINA.DIRECCION_REGIONAL') IS NOT NULL
	DROP TABLE SCH_OFICINA.DIRECCION_REGIONAL
GO
CREATE TABLE SCH_OFICINA.DIRECCION_REGIONAL(
CODIGO_REG_PK INT PRIMARY KEY,
NOMBRE_DIRECCION_REGIONAL VARCHAR(180)
)

IF OBJECT_ID('SCH_OFICINA.OFICINA_LOCAL') IS NOT NULL
	DROP TABLE SCH_OFICINA.OFICINA_LOCAL
GO
CREATE TABLE SCH_OFICINA.OFICINA_LOCAL(
CODIGO_OL_PK INT PRIMARY KEY,
NOMBRE_OFICINA_LOCAL VARCHAR(180),
FK_DIRECCION_REGIONAL INT,
constraint FK_DIRECCION_REGIONAL
foreign key (FK_DIRECCION_REGIONAL)
references DIRECCION_REGIONAL(CODIGO_REG_PK)
)

IF OBJECT_ID('SCH_OFICINA.CENCINAI') IS NOT NULL
	DROP TABLE SCH_OFICINA.CENCINAI
GO
CREATE TABLE SCH_OFICINA.CENCINAI(
CODIGO_CC_PK INT PRIMARY KEY,
CANTIDAD_NINOS INT,
NOMBRE_CENCINAI INT,
CODIGO_OL_FK INT,
CODIGO_GE_FK INT,
CODIGO_AULA_FK INT,
constraint CODIGO_OL_FK 
foreign key (CODIGO_OL_FK )
references OFICINA_LOCAL(CODIGO_OL_PK),
constraint CODIGO_GE_FK
foreign key (CODIGO_GE_FK)
references GRUPO_ETARIO(CODIGO_GE_PK),
constraint CODIGO_AULA_FK
foreign key (CODIGO_AULA_FK)
references AULA(CODIGO_AULA_PK),
)

IF OBJECT_ID('SCH_OFICINA.GRUPO_ETARIO') IS NOT NULL
	DROP TABLE SCH_OFICINA.GRUPO_ETARIO
GO
CREATE TABLE SCH_OFICINA.GRUPO_ETARIO(
CODIGO_GE_PK INT PRIMARY KEY,
NOMBRE_GRUPO_ETARIO VARCHAR(180)
)

IF OBJECT_ID('SCH_OFICINA.AULA') IS NOT NULL
	DROP TABLE SCH_OFICINA.AULA
GO
CREATE TABLE SCH_OFICINA.AULA(
CODIGO_AULA_PK INT PRIMARY KEY,
TIPO_AULA VARCHAR(180)
DESCRIPCION_AULA VARCHAR (180)
)

ALTER TABLE SCH_OFICINA.AULA
DROP COLUMN DESCRIPCION_AULA; -- Eliminar la columna DESCRIPCION_AULA/ Uso de DROP

SELECT * FROM SCH_OFICINA.AULA -- Verificar la eliminación de la columna DESCRIPCION_AULA


---- USO DE TRY CATCH

BEGIN TRY  
    INSERT INTO SCH_FUNCIONARIOS.PROVINCIA(ID_PROVINCIA_PK,NOMBRE_PROVINCIA)
    VALUES(1,'SAN JOSE')
END TRY  
BEGIN CATCH  
    SELECT 'Error insertanto provincia'
END CATCH; 


BEGIN TRY  
    INSERT INTO SCH_FUNCIONARIOS.FUNCIONARIOS(ID_FUNCIONARIO_PK,NOMBRE_FUNCIONARIO,APELLIDO_FUNCIONARIO)
	VALUES(1205891,'MARIA','PEREZ')
END TRY  
BEGIN CATCH  
    SELECT 'Error en ingreso de cliente'
END CATCH;


---CREACION DE VISTAS---

CREATE VIEW VISTA_FUNCIONARIOS AS
SELECT NOMBRE_FUNCIONARIO,APELLIDO_FUNCIONARIO,ID_DISCIPLINA_FK
FROM SCH_FUNCIONARIOS.FUNCIONARIOS -- Se genera VISTA_FUNCIONARIOS para visualizar los funcionarios de la unidad y su disciplina

SELECT * FROM VISTA_FUNCIONARIOS -- Visualizar a los funcionarios de la UNAT y la disciplina de cada uno para la generación de informes


CREATE VIEW VISTA_ESTABLECIMIENTO AS
SELECT NOMBRE_CENCINAI,CANTIDAD_NINOS
FROM SCH_OFICINA.CENCINAI -- Se genera VISTA_ESTABLECIMIENTO para visualizar el nombre del establecimiento y su cantidad de niñas y niños atendidos.

SELECT * FROM VISTA_ESTABLECIMIENTO -- Visualizar los establecimientos con su cantidad de niñas y niños para análisis de coberturas.

CREATE VIEW VISTA_NORMATIVA AS
SELECT P.NOMBRE_PROCEDIMIENTOS
FROM SCH_PROCESOS.PROCEDIMIENTOS P
JOIN SCH_PROCESOS.NORMAS N
ON P.FK_ID_NORMAS = N.ID_NORMA_PK -- Se genera VISTA_NORMATIVA para visualizar las normas según procedimientos disponibles.

SELECT * FROM VISTA_NORMATIVA -- Visualizar normas según procedimientos.


CREATE VIEW VISTA_SEGUIMIENTO AS
SELECT C.CODIGO_CC_PK,NOMBRE_CENCINAI,CANTIDAD_NINOS
FROM SCH_OFICINA.CENCINAI C
JOIN SCH_OFICINA.OFICINA_LOCAL O
ON C.CODIGO_OL_FK = O.CODIGO_OL_PK -- Se genera VISTA_SEGUIMIENTO para identificar las Oficinas Locales y la cantidad de niñas y niños que disponen en los establecimientos.

SELECT * FROM VISTA_SEGUIMIENTO -- Visualizar características de los establecimientos CEN-CINAI, según Oficina Local para determinar cumplimiento de niñas y niños.

---Uso de Procedimiento Almacenado

CREATE PROCEDURE AGREGAR_CODIGO_PAIS
AS
BEGIN
UPDATE SCH_FUNCIONARIOS.CONTACTO SET CONTACTO = '506'+CONTACTO WHERE TIPO = 'TELEFONO';
END;

EXECUTE AGREGAR_CODIGO_PAIS;

SELECT * FROM SCH_FUNCIONARIOS.CONTACTO;



